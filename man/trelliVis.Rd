% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trelliVis.R
\name{trelliVis}
\alias{trelliVis}
\title{Automated trelliscopejs plotting from omicsData}
\usage{
trelliVis(omicsData = NULL, omicsStats = NULL, omicsFormat = NULL,
  p_val = 0.05, panel_variable = NULL, try_URL = NULL,
  trelli_name = NULL, trelli_path_out = "TrelliDisplay",
  plot_text = FALSE, interactive = FALSE, y_limits = NULL,
  plot_type = NULL, self_contained = FALSE, custom_cog = NULL,
  custom_plot = NULL, display = TRUE, points = TRUE, ...)
}
\arguments{
\item{omicsData}{A pmartR object of class pepData, lipidData, metabData, or proData. Can use list(pepData, proData) for associated data.}

\item{omicsStats}{A statistical results object produced by running \code{imd_anova} on omicsData. Can use list(pepStats, proStats) for associated data.}

\item{omicsFormat}{Output of as.trellData() function}

\item{p_val}{Numeric that specifies p-value for significance calculations. Default is 0.05.}

\item{panel_variable}{String: Name of column that plot panels are sorted by (e.g. each plotting arrangement has a unique identifier from panel variable). Default is emeta_cname if present, edata_cname where emeta_cname is not present.}

\item{try_URL}{Will attempt to link to PubChem, LipidMaps, or Uniprot based on information in specified column. Default is NULL.}

\item{trelli_name}{String: name of display, or list of names where a list is provided for omicsData and omicsStats}

\item{trelli_path_out}{String: path to where trelliscope is stored. Default is "./TrelliDisplay"}

\item{plot_text}{Disable plot text}

\item{interactive}{Should the plots be rendered as plotly objects?}

\item{y_limits}{Y limits}

\item{plot_type}{plots for plotting}

\item{self_contained}{Should display be generated in document? Defaults to FALSE}

\item{custom_cog}{The name of a user generated function with cognostics. Function should act on a subset of data and output a dataframe (or tibble or equivelent) with one row (summary of rows).}

\item{custom_plot}{User defined plotting function to be executed on specified data subsets. Other format_plot specifications do not apply to this plot. Should return a single plot per function call. Veiwing the data using as.trellData is highly encouraged to facillitate function development.}

\item{display}{When FALSE, will return arguments to be passed into trelliscopejs::trelliscope() as a list without generating a display.}

\item{points}{Only for abundance_boxplot plot_type; should points be included with boxplots? Defaults to TRUE.}

\item{...}{Additional arguments for trelliscope() function; trelliVis supports arguments jsonp, split_sig, auto_cog, height, width, desc, md_desc. Argument panel_col is currently not supported and may produce errors. Arguments state, group, ncol, nrow, and thumb are preset (display = FALSE is useful for modifying these). Refer to ?trelliscopejs::trelliscope()}
}
\description{
Generates trelliscopejs displays using pairwise comparisons and data values of omicsData and omicsStats objects. Customizable for plot types, y axis limits, paneling variable (what overall group is plotted on each graph arrangement), as well as desired variables for the y and x axis.
}
\details{
Descriptions of plot_type values and y-limits are as follows:
\tabular{ll}{
abundance_boxplot \tab Boxplots generated from trellData abundance values. Only available if omicsData was passed in as.trellData to generate trellData object. \cr
\tab \cr
abundance_global \tab  Biomolecule-specific abundance values compared to global abundances across all biomolecules. Only available if omicsData was passed in as.trellData to generate trellData object. \cr
\tab \cr
abundance_heatmap \tab  Heatmap of biomolecule abundances in with a mapping variable (e_meta) across samples. Only available if omicsData with e_meta was passed in as.trellData to generate trellData object. \cr
\tab \cr
foldchange_bar \tab Bar graphs generated from trellData foldchange values. Only available if omicsStats was passed in as.trellData to generate trellData object. \cr
\tab\cr
foldchange_global \tab Biomolecule-specific foldchange values compared to global foldchanges across all biomolecules. Only available if omicsStats was passed in as.trellData to generate trellData object. \cr
\tab \cr
foldchange_heatmap \tab  Heatmap of biomolecule foldchange values in with a mapping variable (e_meta) across samples. Only available if omicsStats AND omicsData was passed in as.trellData to generate trellData object. \cr
\tab \cr
missing_bar \tab Bar graph of the proportion of samples missing/present for each panel_variable. \cr
\tab\cr
presence_heatmap \tab Heatmap of biomolecule presence/absence in with a mapping variable (e_meta) across samples. Only available if omicsData with e_meta was passed in as.trellData to generate trellData object. \cr
}
Valid y_limits entries are as follows:
\tabular{ll}{
scale \tab Options include "free" or "fixed", where "free" allows each panel to auto-scale based on values and "fixed" uses the same scaling across all panels.\cr
\tab \cr
min \tab Minimum value on the y-axis. Where max argument is provided, must be less than max. \cr
\tab \cr
max \tab Maximum value on the y-axis. Where min argument is provided, must be greater than min. \cr
\tab \cr
range \tab A numeric defining the range of y-axis limits, centered on the median of values plotted, OR from a min/max value (if provided). \cr
}
}
\examples{

dontrun{
library(pmartRdata)
library(pmartR)
library(ggplot2)
data("metab_object")
mymetabData <- pmartR::edata_transform(metab_object, "log10")
mymetabData <- pmartR::group_designation(metab_object, "Condition")
mymetabData <- pmartR::normalize_global(metab_object, "all", "median", apply_norm = TRUE, backtransform = TRUE)

pmartR::trelliVis(omicsData = mymetabData, plot_type = "abundance_boxplot", y_limits = "fixed")
pmartR::trelliVis(omicsFormat = pmartR::as.trellData(mymetabData), plot_type = "abundance_boxplot", y_limits = "fixed")
pmartR::trelliVis(mymetabData, plot_type = c("abundance_boxplot", "missing_bar"), y_limits = list(abundance_boxplot = list(min = 3, max = 7), missing_bar = list(max = 0.7)))
pmartR::trelliVis(mymetabData, y_limits = list(abundance_boxplot = list(min = 3, range = 7))))
pmartR::trelliVis(mymetabData, width = 700, height = 200, ncol = 2)

data("isobaric_object")
mypepData  <- pmartR::edata_transform(isobaric_object, "log10")
mypepData  <- pmartR::normalize_isobaric(mypepData, apply_norm = T) # For isobaric normalization
mypepData  <- pmartR::group_designation(mypepData, "Group")
mypepData  <- pmartR::normalize_global(mypepData, "all", "median", apply_norm = TRUE, backtransform = TRUE)
myproRoll  <- pmartR::protein_quant(mypepData, "rrollup")
mypepStats <- pmartR::imd_anova(mypepData, test_method = "combined")
myproStats <- pmartR::imd_anova(myproRoll, test_method = "combined")

pmartR::trelliVis(omicsData = mypepData, omicsStats = mypepStats, try_URL = TRUE, self_contained = TRUE)
pmartR::trelliVis(omicsData = list(mypepData, myproRoll), omicsStats = list(mypepStats, myproStats), trelli_name = "test", trelli_path_out = "./Here")

custom_fn <- function(data){
ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x = 1:10, y = 1:10))
}

custom_fn_cog <- function(data){
tibble::tibble(test1 = 1, test2 = 2, test3 = 3)
}

pmartR::trelliVis(omicsData = mypepData, omicsStats = mypepStats, plot_type = "foldchange_bar", panel_variable = "Protein", plot_text = TRUE, p_val = 0.001, interactive = TRUE)
pmartR:::format_plot(omicsData = list(mypepData, myproRoll), omicsStats = list(mypepStats, myproStats), plot_type = "abundance_boxplot", custom_plot = "custom_fn", costom_cog = "custom_fn_cog", panel_variable = c("Protein", "Protein"))

}


}
\seealso{
\link[pmartR]{as.trellData}

\link[trelliscopejs]{trelliscope}
}
\author{
Rachel Richardson
}
